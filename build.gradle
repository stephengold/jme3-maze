// Gradle build script for the jme3-maze project

plugins {
    id 'application'
    id 'checkstyle'
}

ext.jme3Version = '3.6.0-beta3' // current version of JMonkeyEngine

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m' // to enlarge the Java heap
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'jme3maze.MazeGame'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

configurations.all {
   resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of SNAPSHOTs
}
repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
    //maven { url 'https://s01.oss.sonatype.org/content/groups/staging' } // to find libraries staged but not yet released
}

dependencies {
    implementation 'com.github.stephengold:Heart:8.3.1+for36'
    implementation 'com.github.stephengold:Acorus:0.9.18+for36'
    implementation 'com.github.stephengold:jme3-utilities-x:0.3.1'
    implementation 'com.github.stephengold:tonegodgui:0.1.7'

    implementation 'org.jmonkeyengine:jme3-blender:3.3.2-stable'
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version

    // jme3-maze doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version
}

tasks.register('runAssetProcessor', JavaExec) {
    mainClass = 'jme3maze.AssetProcessor'
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
