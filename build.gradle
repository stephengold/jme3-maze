// Gradle script to build the jme3-maze project

plugins {
    id 'application' // to build JVM applications
    id 'checkstyle'  // to analyze Java sourcecode for style violations
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

checkstyle {
    toolVersion libs.versions.checkstyle.get()
}

tasks.withType(JavaCompile).configureEach { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_20)) {
        // Suppress warnings that source value 8 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m' // to enlarge the Java heap
    //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

application {
    mainClass = 'jme3maze.MazeGame'
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of snapshots
}

dependencies {
    implementation(libs.heart)
    implementation(libs.acorus)
    implementation(libs.jme3.utilities.x)
    implementation(libs.tonegodgui)

    implementation(libs.jme3.blender)
    runtimeOnly(libs.jme3.lwjgl3)
    runtimeOnly(libs.jme3.testdata)

    // jme3-maze doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly(libs.jme3.jogg)
    runtimeOnly(libs.jme3.plugins)
}

tasks.register('runAssetProcessor', JavaExec) {
    mainClass = 'jme3maze.AssetProcessor'
    description 'Converts Blender 3-D models to runtime (.j3o) format.'
}

// Register cleanup tasks:

clean.dependsOn('cleanLogs', 'cleanSandbox')

tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
