// Gradle build script for the jme3-maze project

plugins {
    id 'application'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext { // current versions of libraries:
    jme3Version = '3.5.1-stable'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'jme3maze.MazeGame'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

repositories {
    //mavenLocal() // to find local SNAPSHOTs of libraries
    mavenCentral()
}

dependencies {
    implementation 'com.github.stephengold:Heart:7.5.0'
    implementation 'com.github.stephengold:Acorus:0.9.11'
    implementation 'com.github.stephengold:jme3-utilities-x:0.3.0'
    implementation 'com.github.stephengold:tonegodgui:0.1.7'

    implementation 'org.jmonkeyengine:jme3-blender:3.3.2-stable'
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jme3Version

    // jme3-maze doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version
}

task runAssetProcessor(type: JavaExec) {
    mainClass = 'jme3maze.AssetProcessor'
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')

task cleanDLLs(type: Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) { // extracted macOSX native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
task cleanWrittenAssets(type: Delete) { // Acorus output directory
    delete 'Written Assets'
}
