plugins {
    id 'application'
    id 'java'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) { // Java runtime options:
    args = []
    classpath sourceSets.main.runtimeClasspath
    //debug true
    //doFirst { println commandLine }
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m'
    //jvmArgs '-XX:+UseConcMarkSweepGC'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

ext.jmonkeyengineVersion = '3.3.2-stable' // from mavenCentral

mainClassName = 'jme3maze.MazeGame'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

repositories {
    //mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.github.stephengold:Heart:6.4.2'
    implementation 'com.github.stephengold:jme3-utilities-ui:0.9.2'
    implementation 'com.github.stephengold:jme3-utilities-x:0.2.20'
    implementation 'com.github.stephengold:tonegodgui:0.1.5'

    runtimeOnly 'org.jmonkeyengine:jme3-blender:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.4.0-beta1'
}

task runAssetProcessor(type: JavaExec) {
    main 'jme3maze.AssetProcessor'
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}
