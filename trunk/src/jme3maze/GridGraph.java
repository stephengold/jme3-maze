/*
 Copyright (c) 2014, Stephen Gold
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 * Stephen Gold's name may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL STEPHEN GOLD BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package jme3maze;

import com.jme3.math.Vector3f;
import java.util.Random;
import java.util.logging.Logger;
import jme3utilities.Validate;
import jme3utilities.navigation.NavArc;
import jme3utilities.navigation.NavGraph;
import jme3utilities.navigation.NavNode;

/**
 * A navigation graph generated by randomly pruning a rectangular grid.
 *
 * @author Stephen Gold <sgold@sonic.net>
 */
public class GridGraph
        extends NavGraph {
    // *************************************************************************
    // constants

    /**
     * message logger for this class
     */
    final private static Logger logger =
            Logger.getLogger(GridGraph.class.getName());
    // *************************************************************************
    // fields
    /**
     * rectangular array of nodes in the grid
     */
    final private NavNode[][] grid;
    /**
     * generator for randomization (not null)
     */
    final private Random generator;
    // *************************************************************************
    // constructors

    /**
     * Instantiate a graph with the specified dimensions etc.
     *
     * @param gridRows number of rows in the grid (&gt;1)
     * @param gridColumns number of columns in the grid (&gt;1)
     * @param rowSpacing spacing between rows (in world units, &gt;0)
     * @param columnSpacing spacing between columns (in world units, &gt;0)
     * @param generator generator for randomization (not null)
     * @param yValue y-coordinate of the grid (in world coordinates)
     */
    public GridGraph(int gridRows, int gridColumns, float rowSpacing,
            float columnSpacing, Random generator, float yValue) {
        if (gridRows < 2) {
            throw new IllegalArgumentException(
                    "grid should have at least 2 rows");
        }
        Validate.nonNegative(rowSpacing, "row spacing");
        if (gridColumns < 2) {
            throw new IllegalArgumentException(
                    "grid should have at least 2 columns");
        }
        Validate.nonNegative(columnSpacing, "column spacing");
        Validate.nonNull(generator, "generator");

        this.generator = generator;
        /**
         * Create a rectangular grid of nodes in which neighbors are connected
         * by arcs.
         */
        grid = new NavNode[gridRows][gridColumns];
        makeGrid(rowSpacing, columnSpacing, yValue);
        addArcs();
        /**
         * Prune arcs until a minimum spanning tree is obtained.
         */
        int numPairs = nodes.size() - 1;
        if (numPairs <= 0) {
            return;
        }
        pruneTo(numPairs);
    }
    // *************************************************************************
    // private methods

    /**
     * Create a new arc and add it to the graph.
     *
     * @param startNode not null
     * @param endNode not null
     */
    private void addArc(NavNode startNode, NavNode endNode) {
        assert startNode != null;
        assert endNode != null;

        Vector3f startPosition = startNode.getLocation();
        Vector3f offset = endNode.getLocation();
        offset.subtractLocal(startPosition);
        float pathLength = offset.length();
        Vector3f direction = offset.divide(pathLength);
        NavArc newArc = startNode.addArc(endNode, pathLength, direction);
        arcs.add(newArc);
    }

    /**
     * Add arcs to connect all neighboring nodes.
     */
    private void addArcs() {
        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            for (int column = 0; column < gridColumns; column++) {
                NavNode node = grid[row][column];
                /*
                 * Each node can have up to four neighbors.
                 */
                if (row + 1 < gridRows) {
                    NavNode north = grid[row + 1][column];
                    addArc(node, north);
                }
                if (column + 1 < gridColumns) {
                    NavNode east = grid[row][column + 1];
                    addArc(node, east);
                }
                if (row - 1 >= 0) {
                    NavNode south = grid[row - 1][column];
                    addArc(node, south);
                }
                if (column - 1 >= 0) {
                    NavNode west = grid[row][column - 1];
                    addArc(node, west);
                }
            }
        }
    }

    /**
     * Initialize the rectangular grid of nodes.
     *
     * @param rowSpacing in world units, &gt;0
     * @param columnSpacing in world units, &gt;0
     * @param yValue y-coordinate of the grid (in world coordinates)
     */
    private void makeGrid(float rowSpacing, float columnSpacing, float yValue) {
        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            float x = rowSpacing * row;
            for (int column = 0; column < gridColumns; column++) {
                float z = columnSpacing * column;
                Vector3f position = new Vector3f(x, yValue, z);
                String description = String.format("g%d,%d", row, column);
                NavNode newNode = addNode(description, position);
                grid[row][column] = newNode;
            }
        }
    }

    /**
     * Remove random arc-pairs until the specified number of pairs remain.
     */
    private void pruneTo(int numPairs) {
        while (arcs.size() > 2 * numPairs) {
            NavArc arc = randomArc(generator);
            if (isConnectedWithout(arc)) {
                removePair(arc);
            }
        }
    }
}