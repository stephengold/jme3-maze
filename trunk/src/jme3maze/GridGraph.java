/*
 Copyright (c) 2014, Stephen Gold
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 * Stephen Gold's name may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL STEPHEN GOLD BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package jme3maze;

import com.jme3.material.Material;
import com.jme3.math.FastMath;
import com.jme3.math.Quaternion;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import com.jme3.scene.shape.Quad;
import java.util.Random;
import java.util.logging.Logger;
import jme3utilities.MySpatial;
import jme3utilities.navigation.NavArc;
import jme3utilities.navigation.NavGraph;
import jme3utilities.navigation.NavVertex;

/**
 * A 2-D navigation graph generated by randomly pruning a rectangular grid of
 * uniformly-spaced vertices.
 *
 * @author Stephen Gold <sgold@sonic.net>
 */
class GridGraph
        extends NavGraph {
    // *************************************************************************
    // constants

    /**
     * message logger for this class
     */
    final private static Logger logger =
            Logger.getLogger(GridGraph.class.getName());
    /**
     * a unit square mesh
     */
    final private static Quad unitSquare = new Quad(1f, 1f);
    /**
     * world "up" direction
     */
    final private static Vector3f upDirection = Vector3f.UNIT_Y;
    // *************************************************************************
    // fields
    /**
     * spacing between vertices in the X and Z directions: set by constructor
     * (in world units, &gt;0)
     */
    final private float vertexSpacing;
    /**
     * rectangular array of vertices in the grid: set by constructor
     */
    final private NavVertex[][] grid;
    /**
     * generator for randomization: set by constructor (not null)
     */
    final private Random generator;
    // *************************************************************************
    // constructors

    /**
     * Instantiate a graph with the specified dimensions etc.
     *
     * @param gridRows number of rows on the X-axis of the grid (&gt;1)
     * @param gridColumns number of columns on the Z-axis of the grid (&gt;1)
     * @param vertexSpacing spacing between columns in the Z direction (in world
     * units, &gt;0)
     * @param generator number generator for randomization (not null)
     * @param yValue y-coordinate of the grid (in world coordinates)
     */
    GridGraph(int gridRows, int gridColumns, float vertexSpacing,
            Random generator, float yValue) {
        assert gridRows > 1 : gridRows;
        assert gridColumns > 1 : gridColumns;
        assert vertexSpacing > 0f : vertexSpacing;
        assert generator != null;

        this.generator = generator;
        this.vertexSpacing = vertexSpacing;
        /**
         * Create a rectangular grid of vertices in which neighbors are
         * connected by arcs.
         */
        grid = new NavVertex[gridRows][gridColumns];
        makeGrid(yValue);
        addArcs();
        /**
         * Prune arcs until a minimum spanning tree is obtained.
         */
        int numPairs = vertices.size() - 1;
        if (numPairs <= 0) {
            return;
        }
        pruneTo(numPairs);
    }
    // *************************************************************************
    // new methods exposed

    /**
     * Add a ceiling to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param floorY world Y-coordinate of the floor
     * @param material material for the ceiling (not null)
     */
    void constructCeiling(Node parentNode, float floorY, Material material) {
        assert parentNode != null;
        assert material != null;

        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            float x = vertexSpacing * (row - 0.5f);
            for (int column = 0; column < gridColumns; column++) {
                float z = vertexSpacing * (column - 0.5f);
                Vector3f location = new Vector3f(x, floorY, z);
                String description = String.format("ceiling%d,%d", row, column);
                constructCeilingTile(parentNode, location, material,
                        description);
            }
        }
    }

    /**
     * Add a floor to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param floorY world Y-coordinate of the floor
     * @param material material for the floor (not null)
     */
    void constructFloor(Node parentNode, float floorY, Material material) {
        assert parentNode != null;
        assert material != null;

        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            float x = vertexSpacing * (row - 0.5f);
            for (int column = 0; column < gridColumns; column++) {
                float z = vertexSpacing * (column + 0.5f);
                Vector3f location = new Vector3f(x, floorY, z);
                String description = String.format("floor%d,%d", row, column);
                constructFloorTile(parentNode, location, material, description);
            }
        }
    }

    /**
     * Add walls to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param floorY world Y-coordinate of the floor
     * @param corridorWidth width of corridors (in world units, &gt;0)
     * @param wallHeight height of walls (in world units, &gt;0)
     * @param material material for walls (not null)
     */
    void constructWalls(Node parentNode, float floorY, float corridorWidth,
            float wallHeight, Material material) {
        assert parentNode != null;
        assert corridorWidth > 0f : corridorWidth;
        assert wallHeight > 0f : wallHeight;
        assert material != null;

        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            for (int column = 0; column < gridColumns; column++) {
                constructWalls(parentNode, row, column, floorY, corridorWidth,
                        wallHeight, material);
            }
        }
    }
    // *************************************************************************
    // private methods

    /**
     * Create a new arc and add it to the graph.
     *
     * @param startVertex not null
     * @param endVertex not null
     */
    private void addArc(NavVertex startVertex, NavVertex endVertex) {
        assert startVertex != null;
        assert endVertex != null;

        Vector3f startPosition = startVertex.getLocation();
        Vector3f offset = endVertex.getLocation();
        offset.subtractLocal(startPosition);
        float pathLength = offset.length();
        Vector3f direction = offset.divide(pathLength);
        NavArc newArc = startVertex.addArc(endVertex, pathLength, direction);
        arcs.add(newArc);
    }

    /**
     * Add arcs to connect all neighboring vertices.
     */
    private void addArcs() {
        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            for (int column = 0; column < gridColumns; column++) {
                NavVertex vertex = grid[row][column];
                /*
                 * Each vertex has two-to-four neighbors.
                 */
                if (row + 1 < gridRows) {
                    NavVertex north = grid[row + 1][column];
                    addArc(vertex, north);
                }
                if (column + 1 < gridColumns) {
                    NavVertex east = grid[row][column + 1];
                    addArc(vertex, east);
                }
                if (row - 1 >= 0) {
                    NavVertex south = grid[row - 1][column];
                    addArc(vertex, south);
                }
                if (column - 1 >= 0) {
                    NavVertex west = grid[row][column - 1];
                    addArc(vertex, west);
                }
            }
        }
    }

    /**
     * Add a square ceiling tile to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param location world coordinates of tile's main corner (not null)
     * @param material material for the ceiling (not null)
     * @param description name for the geometry (not null)
     */
    private void constructCeilingTile(Node parentNode, Vector3f location,
            Material material, String description) {
        assert location != null;
        assert material != null;
        assert description != null;

        Geometry geometry = new Geometry(description, unitSquare);
        parentNode.attachChild(geometry);
        geometry.setLocalScale(vertexSpacing, vertexSpacing, 1f);
        geometry.setMaterial(material);
        MySpatial.setWorldLocation(geometry, location);

        Quaternion rotation = new Quaternion();
        rotation.fromAngleAxis(FastMath.HALF_PI, Vector3f.UNIT_X);
        MySpatial.setWorldOrientation(geometry, rotation);
    }

    /**
     * Add a closure wall for the specified vertex and orientation.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param vertexLocation (not null)
     * @param orientation relative to the world's +Z direction (not null)
     * @param floorY world Y-coordinate of the floor
     * @param corridorWidth width of corridors (in world units, &gt;0)
     * @param wallHeight height of walls (in world units, &gt;0)
     * @param material material for walls (not null)
     */
    private void constructClosure(Node parentNode, Vector3f vertexLocation,
            Quaternion orientation, float floorY, float corridorWidth,
            float wallHeight, Material material) {
        assert parentNode != null;
        assert vertexLocation != null;
        assert corridorWidth > 0f : corridorWidth;
        assert wallHeight > 0f : wallHeight;
        assert material != null;

        float halfWidth = corridorWidth / 2f;

        Vector3f lowerLeftCorner = new Vector3f(halfWidth, floorY, halfWidth);
        lowerLeftCorner = orientation.mult(lowerLeftCorner);
        lowerLeftCorner.addLocal(vertexLocation);

        Vector3f lowerRightCorner = new Vector3f(-halfWidth, floorY, halfWidth);
        lowerRightCorner = orientation.mult(lowerRightCorner);
        lowerRightCorner.addLocal(vertexLocation);

        String description = "closure wall";
        constructWallSegment(parentNode, lowerLeftCorner, lowerRightCorner,
                wallHeight, material, description);
    }

    /**
     * Add a square floor tile to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param location world coordinates of tile's main corner (not null)
     * @param material material for the floor (not null)
     * @param description name for the geometry (not null)
     */
    private void constructFloorTile(Node parentNode, Vector3f location,
            Material material, String description) {
        assert location != null;
        assert material != null;
        assert description != null;

        Geometry geometry = new Geometry(description, unitSquare);
        parentNode.attachChild(geometry);
        geometry.setLocalScale(vertexSpacing, vertexSpacing, 1f);
        geometry.setMaterial(material);
        MySpatial.setWorldLocation(geometry, location);

        Quaternion rotation = new Quaternion();
        rotation.fromAngleAxis(-FastMath.HALF_PI, Vector3f.UNIT_X);
        MySpatial.setWorldOrientation(geometry, rotation);
    }

    /**
     * Add an opening wall for the specified vertex and orientation.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param vertexLocation (not null)
     * @param orientation relative to the world's +Z direction (not null)
     * @param floorY world Y-coordinate of the floor
     * @param corridorWidth width of corridors (in world units, &gt;0)
     * @param wallHeight height of walls (in world units, &gt;0)
     * @param material material for walls (not null)
     */
    private void constructOpening(Node parentNode, Vector3f vertexLocation,
            Quaternion orientation, float floorY, float corridorWidth,
            float wallHeight, Material material) {
        assert parentNode != null;
        assert vertexLocation != null;
        assert corridorWidth > 0f : corridorWidth;
        assert wallHeight > 0f : wallHeight;
        assert material != null;

        float halfSpacing = vertexSpacing / 2f;
        float halfWidth = corridorWidth / 2f;

        Vector3f corner1 = new Vector3f(halfSpacing, floorY, halfWidth);
        corner1 = orientation.mult(corner1);
        corner1.addLocal(vertexLocation);

        Vector3f corner2 = new Vector3f(halfWidth, floorY, halfWidth);
        corner2 = orientation.mult(corner2);
        corner2.addLocal(vertexLocation);

        Vector3f corner3 = new Vector3f(halfWidth, floorY, halfSpacing);
        corner3 = orientation.mult(corner3);
        corner3.addLocal(vertexLocation);

        Vector3f corner4 = new Vector3f(-halfWidth, floorY, halfSpacing);
        corner4 = orientation.mult(corner4);
        corner4.addLocal(vertexLocation);

        Vector3f corner5 = new Vector3f(-halfWidth, floorY, halfWidth);
        corner5 = orientation.mult(corner5);
        corner5.addLocal(vertexLocation);

        Vector3f corner6 = new Vector3f(-halfSpacing, floorY, halfWidth);
        corner6 = orientation.mult(corner6);
        corner6.addLocal(vertexLocation);

        String description = "opening wall 1";
        constructWallSegment(parentNode, corner1, corner2, wallHeight,
                material, description);
        description = "opening wall 2";
        constructWallSegment(parentNode, corner2, corner3, wallHeight,
                material, description);
        description = "opening wall 3";
        constructWallSegment(parentNode, corner4, corner5, wallHeight,
                material, description);
        description = "opening wall 4";
        constructWallSegment(parentNode, corner5, corner6, wallHeight,
                material, description);
    }

    /**
     * Add walls for a particular pair of adjacent vertices.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param fromVertex (not null)
     * @param toVertex (not null)
     * @param floorY world Y-coordinate of the floor
     * @param corridorWidth width of corridors (in world units, &gt;0)
     * @param wallHeight height of walls (in world units, &gt;0)
     * @param material material for walls (not null)
     */
    private void constructWall(Node parentNode, NavVertex fromVertex,
            NavVertex toVertex, float floorY, float corridorWidth,
            float wallHeight, Material material) {
        assert parentNode != null;
        assert fromVertex != null;
        assert toVertex != null;
        assert corridorWidth > 0f : corridorWidth;
        assert wallHeight > 0f : wallHeight;
        assert material != null;

        Vector3f fromLocation = fromVertex.getLocation();
        Vector3f toLocation = toVertex.getLocation();
        Vector3f offset = toLocation.subtract(fromLocation);
        Quaternion orientation = new Quaternion();
        orientation.lookAt(offset, upDirection);
        NavArc arc = fromVertex.findArcTo(toVertex);
        if (arc == null) {
            constructClosure(parentNode, fromLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        } else {
            constructOpening(parentNode, fromLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        }
    }

    /**
     * Add walls for the specified vertex.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param row (&ge;0)
     * @param column (&ge;0)
     * @param floorY world Y-coordinate of the floor
     * @param corridorWidth width of corridors (in world units, &gt;0)
     * @param wallHeight height of walls (in world units, &gt;0)
     * @param material material for walls (not null)
     */
    private void constructWalls(Node parentNode, int row, int column,
            float floorY, float corridorWidth, float wallHeight,
            Material material) {
        assert parentNode != null;
        assert row >= 0 : row;
        assert column >= 0 : column;
        assert corridorWidth > 0f : corridorWidth;
        assert wallHeight > 0f : wallHeight;
        assert material != null;

        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        NavVertex fromVertex = grid[row][column];
        Vector3f vertexLocation = fromVertex.getLocation();
        Quaternion orientation = new Quaternion();

        if (row + 1 < gridRows) {
            NavVertex north = grid[row + 1][column];
            constructWall(parentNode, fromVertex, north, floorY, corridorWidth,
                    wallHeight, material);
        } else {
            orientation.lookAt(Vector3f.UNIT_X, upDirection);
            constructClosure(parentNode, vertexLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        }

        if (column + 1 < gridColumns) {
            NavVertex east = grid[row][column + 1];
            constructWall(parentNode, fromVertex, east, floorY, corridorWidth,
                    wallHeight, material);
        } else {
            orientation.lookAt(Vector3f.UNIT_Z, upDirection);
            constructClosure(parentNode, vertexLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        }

        if (row - 1 >= 0) {
            NavVertex south = grid[row - 1][column];
            constructWall(parentNode, fromVertex, south, floorY, corridorWidth,
                    wallHeight, material);
        } else {
            orientation.lookAt(new Vector3f(-1f, 0f, 0f), upDirection);
            constructClosure(parentNode, vertexLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        }

        if (column - 1 >= 0) {
            NavVertex west = grid[row][column - 1];
            constructWall(parentNode, fromVertex, west, floorY, corridorWidth,
                    wallHeight, material);
        } else {
            orientation.lookAt(new Vector3f(0f, 0f, -1f), upDirection);
            constructClosure(parentNode, vertexLocation, orientation, floorY,
                    corridorWidth, wallHeight, material);
        }
    }

    /**
     * Add a single wall segment (quad) to a scene.
     *
     * @param parentNode where in the scene to attach the geometries (not null)
     * @param lowerLeftCorner world coordinates of lower left (not null)
     * @param lowerRightCorner world coordinates of lower right (not null)
     * @param height height of the wall (in world units, &gt;0)
     * @param material material for walls (not null)
     * @param description name for the geometry (not null)
     */
    private void constructWallSegment(Node parentNode, Vector3f lowerLeftCorner,
            Vector3f lowerRightCorner, float height, Material material,
            String description) {
        assert lowerLeftCorner != null;
        assert lowerRightCorner != null;
        assert lowerLeftCorner.y == lowerRightCorner.y;
        assert height > 0f : height;
        assert material != null;
        assert description != null;

        Geometry geometry = new Geometry(description, unitSquare);
        parentNode.attachChild(geometry);
        Vector3f baseOffset = lowerRightCorner.subtract(lowerLeftCorner);
        float width = baseOffset.length();
        Vector3f scale = new Vector3f(width, height, 1f);
        geometry.setLocalScale(scale);
        geometry.setMaterial(material);
        MySpatial.setWorldLocation(geometry, lowerLeftCorner);

        Vector3f direction = baseOffset.cross(upDirection);
        Quaternion orientation = new Quaternion();
        orientation.lookAt(direction, upDirection);
        MySpatial.setWorldOrientation(geometry, orientation);
    }

    /**
     * Initialize the rectangular grid of vertices.
     *
     * @param yValue y-coordinate of the grid (in world coordinates)
     */
    private void makeGrid(float yValue) {
        int gridRows = grid.length;
        int gridColumns = grid[0].length;
        for (int row = 0; row < gridRows; row++) {
            float x = vertexSpacing * row;
            for (int column = 0; column < gridColumns; column++) {
                float z = vertexSpacing * column;
                Vector3f position = new Vector3f(x, yValue, z);
                String description = String.format("g%d,%d", row, column);
                NavVertex newVertex = addVertex(description, position);
                grid[row][column] = newVertex;
            }
        }
    }

    /**
     * Remove random arc-pairs until the specified number of pairs remain.
     *
     * @param numPairs pair-count goal (&ge;0)
     */
    private void pruneTo(int numPairs) {
        assert numPairs >= 0 : numPairs;

        while (arcs.size() > 2 * numPairs) {
            NavArc arc = randomArc(generator);
            if (isConnectedWithout(arc)) {
                removePair(arc);
            }
        }
    }
}